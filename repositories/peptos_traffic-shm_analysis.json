{
  "repository": "peptos/traffic-shm",
  "analysis_date": "2025-06-09",
  "total_functions": 237,
  "functions_with_tests": 15,
  "test_coverage_percentage": 6.329113924050633,
  "total_test_functions": 150,
  "functions_by_domain": {
    "general": 88,
    "data_structures": 69,
    "atomic_operations": 39,
    "producer_consumer": 26,
    "utilities": 6,
    "memory_management": 6,
    "synchronization": 3
  },
  "functions_by_complexity": {
    "low": 223,
    "medium": 11,
    "high": 3,
    "very_high": 0
  },
  "functions_by_type": {
    "method": 232,
    "constructor": 5
  },
  "test_type_distribution": {
    "unit": 150
  },
  "top_sync_primitives": {
    "static": 203,
    "volatile": 33,
    "Lock": 11,
    "lock": 11,
    "final": 4,
    "getAndAdd": 4,
    "getAndSet": 4,
    "Thread": 1,
    "release": 1,
    "compareAndSet": 1
  },
  "concurrency_patterns": {
    "singleton_pattern": 203,
    "thread_local_storage": 118,
    "future_pattern": 78,
    "producer_consumer": 39,
    "double_checked_locking": 31,
    "immutable_object": 4,
    "compare_and_swap": 4
  },
  "functions": [
    {
      "name": "print",
      "signature": "public static void print(Object object) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "out.print",
        "print"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (enable) {\n            System.out.print(object);\n        }\n    }",
      "line_number": 23,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "println",
      "signature": "public static void println(Object object) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "out.println",
        "println"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (enable) {\n            System.out.println(object);\n        }\n    }",
      "line_number": 29,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "printf",
      "signature": "public static void printf(String format, Object ... args) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "out.printf",
        "printf"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 4,
      "source_code": "        if (enable) {\n            System.out.printf(format, args);\n        }\n    }",
      "line_number": 35,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "isTraceEnabled",
      "signature": "public static boolean isTraceEnabled() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return enable;\n    }",
      "line_number": 41,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "enable",
      "signature": "public static void enable() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        enable = true;\n    }",
      "line_number": 45,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "disable",
      "signature": "public static void disable() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Tracer.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        enable = false;\n    }",
      "line_number": 49,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Tracer",
      "method_type": "method"
    },
    {
      "name": "hasLength",
      "signature": "public static boolean hasLength(CharSequence str) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/StringUtils.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "str.length",
        "length"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (str != null && str.length() > 0);\n    }",
      "line_number": 58,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "delivers",
      "method_type": "method"
    },
    {
      "name": "hasLength",
      "signature": "public static boolean hasLength(String str) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/StringUtils.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return hasLength((CharSequence) str);\n    }",
      "line_number": 71,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "delivers",
      "method_type": "method"
    },
    {
      "name": "hasText",
      "signature": "public static boolean hasText(CharSequence str) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/StringUtils.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "str.length",
        "Character.isWhitespace",
        "length",
        "isWhitespace",
        "str.charAt",
        "charAt"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 5,
      "source_code": "        if (!hasLength(str)) {\n            return false;\n        }\n        int strLen = str.length();\n        for (int i = 0; i < strLen; i++) {\n            if (!Character.isWhitespace(str.charAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }",
      "line_number": 92,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "delivers",
      "method_type": "method"
    },
    {
      "name": "hasText",
      "signature": "public static boolean hasText(String str) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/StringUtils.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return hasText((CharSequence) str);\n    }",
      "line_number": 115,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "delivers",
      "method_type": "method"
    },
    {
      "name": "isWindows",
      "signature": "public static boolean isWindows() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return IS_WINDOWS;\n    }",
      "line_number": 32,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "getMethod",
      "signature": "public static Method getMethod(Class<?> clazz, String methodName, Class<?>... params) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getDeclaredMethod",
        "method.setAccessible",
        "clazz.getDeclaredMethod",
        "setAccessible",
        "IllegalStateException",
        "notNull",
        "Assert.notNull"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "        Assert.notNull(clazz, \"Class must not be null\");\n        Assert.notNull(methodName, \"Method name must not be null\");\n\n        try {\n            Method method = clazz.getDeclaredMethod(methodName, params);\n            method.setAccessible(true);\n            return method;\n        } catch (NoSuchMethodException ex) {\n            throw new IllegalStateException(\"Expected method not found: \" + ex);\n        }\n    }",
      "line_number": 36,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "getProperty",
      "signature": "public static <T> T getProperty(Object target, String fieldName, Class<T> type) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "ex.getClass",
        "IllegalStateException",
        "notNull",
        "Assert.notNull",
        "getSuperclass",
        "field.getName",
        "setAccessible",
        "field.getType",
        "getName",
        "equals",
        "ex.getMessage",
        "searchType.getSuperclass",
        "get",
        "field.setAccessible",
        "target.getClass",
        "T",
        "getType",
        "getClass",
        "fieldName.equals",
        "field.get",
        "getMessage",
        "type.equals"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 10,
      "source_code": "        Assert.notNull(target, \"Target must not be null\");\n        Assert.notNull(fieldName, \"Field name must not be null\");\n\n        Class<?> searchType = target.getClass();\n        while (Object.class != searchType && searchType != null) {\n            Field[] fields = getDeclaredFields(searchType);\n            for (Field field : fields) {\n                if ((fieldName == null || fieldName.equals(field.getName())) &&\n                        (type == null || type.equals(field.getType()))) {\n\n                    field.setAccessible(true);\n\n                    try {\n                        return (T) field.get(target);\n                    } catch (IllegalAccessException ex) {\n                        throw new IllegalStateException(\"Unexpected reflection exception - \"\n                                + ex.getClass().getName() + \": \" + ex.getMessage());\n                    }\n                }\n            }\n            searchType = searchType.getSuperclass();\n        }\n        return null;\n    }",
      "line_number": 49,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "getDeclaredFields",
      "signature": "private static Field[] getDeclaredFields(Class<?> clazz) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalStateException",
        "getName",
        "notNull",
        "getClassLoader",
        "getDeclaredFields",
        "clazz.getClassLoader",
        "Assert.notNull",
        "clazz.getName",
        "clazz.getDeclaredFields"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "        Assert.notNull(clazz, \"Class must not be null\");\n\n        try {\n            Field[] result = clazz.getDeclaredFields();\n            return result;\n        } catch (Throwable ex) {\n            throw new IllegalStateException(\"Failed to introspect Class [\" + clazz.getName() +\n                    \"] from ClassLoader [\" + clazz.getClassLoader() + \"]\", ex);\n        }\n    }",
      "line_number": 75,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "invokeMethod",
      "signature": "public static Object invokeMethod(Method method, Object target, Object... args) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "RuntimeException",
        "invoke",
        "method.invoke"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "        try {\n            return method.invoke(target, args);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }",
      "line_number": 87,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "align",
      "signature": "public static long align(long value, long alignment) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        long mask = alignment - 1;\n        return (value + mask) & ~mask; //((value + mask) / alignment) * alignment\n    }",
      "line_number": 95,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "align",
      "signature": "public static int align(int value, int alignment) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        int mask = alignment - 1;\n        return (value + mask) & ~mask; //((value + mask) / alignment) * alignment\n    }",
      "line_number": 100,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "pageAlign",
      "signature": "public static long pageAlign(long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return align(size, Constant.PAGE_SIZE);\n    }",
      "line_number": 105,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "pageAlign",
      "signature": "public static int pageAlign(int size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return align(size, Constant.PAGE_SIZE);\n    }",
      "line_number": 109,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "pause",
      "signature": "public static void pause(long millis) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Util.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock",
        "Thread",
        "static"
      ],
      "dependencies": [
        "currentThread",
        "sleep",
        "LockSupport.parkNanos",
        "Thread.currentThread",
        "interrupt",
        "Thread.sleep",
        "parkNanos"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 16,
      "source_code": "        long timeNanos = millis * 1000000;\n        if (timeNanos > 10e6) {\n            try {\n                Thread.sleep(millis);\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n            }\n        } else {\n            LockSupport.parkNanos(timeNanos);\n        }\n    }",
      "line_number": 113,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "synchronization",
      "class_name": "Util",
      "method_type": "method"
    },
    {
      "name": "hash",
      "signature": "public static int hash(String str) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/CRC16.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getBytes",
        "str.getBytes"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return crc16(str.getBytes(StandardCharsets.UTF_8));\n    }",
      "line_number": 76,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "CRC16",
      "method_type": "method"
    },
    {
      "name": "crc16",
      "signature": "public static int crc16(byte[] utf8) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/CRC16.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        int crc = 0;\n        for (byte b : utf8) {\n            crc = ((crc << 8) ^ LOOKUP_TABLE[((crc >>> 8) ^ (b & 0xFF)) & 0xFF]);\n        }\n        return crc & 0xFFFF;\n    }",
      "line_number": 85,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "CRC16",
      "method_type": "method"
    },
    {
      "name": "isTrue",
      "signature": "public static void isTrue(boolean expression, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (!expression) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 63,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isTrue",
      "signature": "public static void isTrue(boolean expression) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tisTrue(expression, \"[Assertion failed] - this expression must be true\");\n\t}",
      "line_number": 76,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isNull",
      "signature": "public static void isNull(Object object, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (object != null) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 87,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isNull",
      "signature": "public static void isNull(Object object) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tisNull(object, \"[Assertion failed] - the object argument must be null\");\n\t}",
      "line_number": 99,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notNull",
      "signature": "public static void notNull(Object object, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (object == null) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 110,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notNull",
      "signature": "public static void notNull(Object object) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tnotNull(object, \"[Assertion failed] - this argument is required; it must not be null\");\n\t}",
      "line_number": 122,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "hasLength",
      "signature": "public static void hasLength(String text, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException",
        "StringUtils.hasLength",
        "hasLength"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (!StringUtils.hasLength(text)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 135,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "hasLength",
      "signature": "public static void hasLength(String text) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\thasLength(text,\n\t\t\t\t\"[Assertion failed] - this String argument must have length; it must not be null or empty\");\n\t}",
      "line_number": 149,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "hasText",
      "signature": "public static void hasText(String text, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException",
        "hasText",
        "StringUtils.hasText"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (!StringUtils.hasText(text)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 163,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "hasText",
      "signature": "public static void hasText(String text) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\thasText(text,\n\t\t\t\t\"[Assertion failed] - this String argument must have text; it must not be null, empty, or blank\");\n\t}",
      "line_number": 177,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "doesNotContain",
      "signature": "public static void doesNotContain(String textToSearch, String substring, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "contains",
        "textToSearch.contains",
        "IllegalArgumentException",
        "StringUtils.hasLength",
        "hasLength"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) &&\n\t\t\t\ttextToSearch.contains(substring)) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 190,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "doesNotContain",
      "signature": "public static void doesNotContain(String textToSearch, String substring) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tdoesNotContain(textToSearch, substring,\n\t\t\t\t\"[Assertion failed] - this String argument must not contain the substring [\" + substring + \"]\");\n\t}",
      "line_number": 204,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notEmpty",
      "signature": "public static void notEmpty(Object[] array, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (array == null || array.length == 0) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 217,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notEmpty",
      "signature": "public static void notEmpty(byte[] array, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (array == null || array.length == 0) {\n\t\t\tthrow new IllegalArgumentException(message);\n\t\t}\n\t}",
      "line_number": 231,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notEmpty",
      "signature": "public static void notEmpty(Object[] array) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tnotEmpty(array, \"[Assertion failed] - this array must not be empty: it must contain at least 1 element\");\n\t}",
      "line_number": 244,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "notEmpty",
      "signature": "public static void notEmpty(byte[] array) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tnotEmpty(array, \"[Assertion failed] - this array must not be empty: it must contain at least 1 element\");\n\t}",
      "line_number": 255,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "noNullElements",
      "signature": "public static void noNullElements(Object[] array, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 5,
      "source_code": "\t\tif (array != null) {\n\t\t\tfor (Object element : array) {\n\t\t\t\tif (element == null) {\n\t\t\t\t\tthrow new IllegalArgumentException(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
      "line_number": 267,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "noNullElements",
      "signature": "public static void noNullElements(Object[] array) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tnoNullElements(array, \"[Assertion failed] - this array must not contain any null elements\");\n\t}",
      "line_number": 284,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isInstanceOf",
      "signature": "public static void isInstanceOf(Class<?> clazz, Object obj) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tisInstanceOf(clazz, obj, \"\");\n\t}",
      "line_number": 296,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isInstanceOf",
      "signature": "public static void isInstanceOf(Class<?> type, Object obj, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "type.isInstance",
        "obj.getClass",
        "isInstance",
        "getName",
        "IllegalArgumentException",
        "StringUtils.hasLength",
        "hasLength",
        "getClass"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "\t\tnotNull(type, \"Type to check against must not be null\");\n\t\tif (!type.isInstance(obj)) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t(StringUtils.hasLength(message) ? message + \" \" : \"\") +\n\t\t\t\t\t\"Object of class [\" + (obj != null ? obj.getClass().getName() : \"null\") +\n\t\t\t\t\t\"] must be an instance of \" + type);\n\t\t}\n\t}",
      "line_number": 312,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isAssignable",
      "signature": "public static void isAssignable(Class<?> superType, Class<?> subType) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tisAssignable(superType, subType, \"\");\n\t}",
      "line_number": 329,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "isAssignable",
      "signature": "public static void isAssignable(Class<?> superType, Class<?> subType, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "isAssignableFrom",
        "superType.isAssignableFrom",
        "IllegalArgumentException",
        "StringUtils.hasLength",
        "hasLength"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tnotNull(superType, \"Type to check against must not be null\");\n\t\tif (subType == null || !superType.isAssignableFrom(subType)) {\n\t\t\tthrow new IllegalArgumentException((StringUtils.hasLength(message) ? message + \" \" : \"\")\n\t\t\t\t+ subType + \" is not assignable to \" + superType);\n\t\t}\n\t}",
      "line_number": 344,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "state",
      "signature": "public static void state(boolean expression, String message) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalStateException"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "\t\tif (!expression) {\n\t\t\tthrow new IllegalStateException(message);\n\t\t}\n\t}",
      "line_number": 361,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "state",
      "signature": "public static void state(boolean expression) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Assert.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "\t\tstate(expression, \"[Assertion failed] - this state invariant must be true\");\n\t}",
      "line_number": 376,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "that",
      "method_type": "method"
    },
    {
      "name": "swap",
      "signature": "static short swap(short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Short.reverseBytes",
        "reverseBytes"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Short.reverseBytes(value);\n    }",
      "line_number": 24,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "swap",
      "signature": "static char swap(char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Character.reverseBytes",
        "reverseBytes"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Character.reverseBytes(value);\n    }",
      "line_number": 28,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "swap",
      "signature": "static int swap(int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Integer.reverseBytes",
        "reverseBytes"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Integer.reverseBytes(value);\n    }",
      "line_number": 32,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "swap",
      "signature": "static long swap(long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Long.reverseBytes",
        "reverseBytes"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Long.reverseBytes(value);\n    }",
      "line_number": 36,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toChar",
      "signature": "static char toChar(char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (char) ((value << 8) | ((value & 0xFF00) >> 8));\n    }",
      "line_number": 40,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toShort",
      "signature": "static short toShort(short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (short) ((value << 8) | ((value & 0xFF00) >> 8));\n    }",
      "line_number": 44,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toInt",
      "signature": "static int toInt(int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (((value) << 24) |\n                ((value << 8) & 0xFF0000) |\n                ((value >> 8) & 0xFF00) |\n                ((value >>> 24)));\n    }",
      "line_number": 48,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toLong",
      "signature": "static long toLong(long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        long b0 = (value >>  0) & 0xff;\n        long b1 = (value >>  8) & 0xff;\n        long b2 = (value >> 16) & 0xff;\n        long b3 = (value >> 24) & 0xff;\n        long b4 = (value >> 32) & 0xff;\n        long b5 = (value >> 40) & 0xff;\n        long b6 = (value >> 48) & 0xff;\n        long b7 = (value >> 56) & 0xff;\n\n        return b0 << 56 |\n                b1 << 48 |\n                b2 << 40 |\n                b3 << 32 |\n                b4 << 24 |\n                b5 << 16 |\n                b6 <<  8 |\n                b7 <<  0;\n    }",
      "line_number": 55,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toChar",
      "signature": "static char toChar(byte b1, byte b0) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (char) ((b1 << 8) | (b0 & 0xff));\n    }",
      "line_number": 75,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toShort",
      "signature": "static short toShort(byte b1, byte b0) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (short) ((b1 << 8) | (b0 & 0xff));\n    }",
      "line_number": 79,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "toInt",
      "signature": "static int toInt(byte b3, byte b2, byte b1, byte b0) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (((b3) << 24) |\n                ((b2 & 0xff) << 16) |\n                ((b1 & 0xff) << 8) |\n                ((b0 & 0xff)));\n    }",
      "line_number": 83,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "short1",
      "signature": "static byte short1(short x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 8);\n    }",
      "line_number": 103,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "short0",
      "signature": "static byte short0(short x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x);\n    }",
      "line_number": 107,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "char1",
      "signature": "static byte char1(char x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 8);\n    }",
      "line_number": 111,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "char0",
      "signature": "static byte char0(char x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x);\n    }",
      "line_number": 115,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "int3",
      "signature": "static byte int3(int x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 24);\n    }",
      "line_number": 120,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "int2",
      "signature": "static byte int2(int x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 16);\n    }",
      "line_number": 124,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "int1",
      "signature": "static byte int1(int x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 8);\n    }",
      "line_number": 128,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "int0",
      "signature": "static byte int0(int x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x);\n    }",
      "line_number": 132,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long7",
      "signature": "static byte long7(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 56);\n    }",
      "line_number": 137,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long6",
      "signature": "static byte long6(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 48);\n    }",
      "line_number": 141,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long5",
      "signature": "static byte long5(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 40);\n    }",
      "line_number": 145,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long4",
      "signature": "static byte long4(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 32);\n    }",
      "line_number": 149,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long3",
      "signature": "static byte long3(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 24);\n    }",
      "line_number": 153,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long2",
      "signature": "static byte long2(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 16);\n    }",
      "line_number": 157,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long1",
      "signature": "static byte long1(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x >> 8);\n    }",
      "line_number": 161,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "long0",
      "signature": "static byte long0(long x) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/Bits.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (byte) (x);\n    }",
      "line_number": 165,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Bits",
      "method_type": "method"
    },
    {
      "name": "run",
      "signature": "public Unsafe run() throws Exception {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "getDeclaredField",
        "setAccessible",
        "get",
        "theUnsafe.get",
        "theUnsafe.setAccessible",
        "class.getDeclaredField"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "                    Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\");\n                    theUnsafe.setAccessible(true);\n                    return (Unsafe) theUnsafe.get(null);\n                }",
      "line_number": 41,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "run",
      "signature": "public Object run() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "getDeclaredMethod",
        "loadClass",
        "internalUnsafeClass.getDeclaredMethod",
        "method.invoke",
        "invoke"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "                    try {\n                        // Java9 has jdk.internal.misc.Unsafe and not all methods are propagated to\n                        // sun.misc.Unsafe\n                        Class<?> internalUnsafeClass = getClassLoader(UNSAFE.class)\n                                .loadClass(\"jdk.internal.misc.Unsafe\");\n                        Method method = internalUnsafeClass.getDeclaredMethod(\"getUnsafe\");\n                        return method.invoke(null);\n                    } catch (Throwable cause) {\n                        return cause;\n                    }\n                }",
      "line_number": 56,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "javaVersion",
      "signature": "private static int javaVersion() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 1,
      "source_code": "        return majorVersionFromJavaSpecificationVersion();\n    }",
      "line_number": 86,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "majorVersionFromJavaSpecificationVersion",
      "signature": "private static int majorVersionFromJavaSpecificationVersion() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "System.getProperty",
        "getProperty"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        return majorVersion(System.getProperty(\"java.specification.version\", \"1.6\"));\n    }",
      "line_number": 90,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "majorVersion",
      "signature": "private static int majorVersion(final String javaSpecVersion) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static",
        "final"
      ],
      "dependencies": [
        "javaSpecVersion.split",
        "parseInt",
        "split",
        "Integer.parseInt"
      ],
      "concurrency_patterns": [
        "singleton_pattern",
        "immutable_object"
      ],
      "complexity_score": 4,
      "source_code": "        final String[] components = javaSpecVersion.split(\"\\\\.\");\n        final int[] version = new int[components.length];\n        for (int i = 0; i < components.length; i++) {\n            version[i] = Integer.parseInt(components[i]);\n        }\n        if (version[0] == 1) {\n            assert version[1] >= 6;\n            return version[1];\n        } else {\n            return version[0];\n        }\n    }",
      "line_number": 94,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getUnsafe",
      "signature": "public static Unsafe getUnsafe() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe;\n    }",
      "line_number": 108,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getClassLoader",
      "signature": "static ClassLoader getClassLoader(final Class<?> clazz) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static",
        "final"
      ],
      "dependencies": [
        "System.getSecurityManager",
        "PrivilegedAction",
        "getSecurityManager",
        "AccessController.doPrivileged",
        "getClassLoader",
        "clazz.getClassLoader",
        "ClassLoader",
        "doPrivileged"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "immutable_object",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        if (System.getSecurityManager() == null) {\n            return clazz.getClassLoader();\n        } else {\n            return AccessController.doPrivileged(new PrivilegedAction<ClassLoader>() {\n                @Override\n                public ClassLoader run() {\n                    return clazz.getClassLoader();\n                }\n            });\n        }\n    }",
      "line_number": 113,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "run",
      "signature": "public ClassLoader run() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "clazz.getClassLoader",
        "getClassLoader"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "                    return clazz.getClassLoader();\n                }",
      "line_number": 119,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "aligned",
      "signature": "private static boolean aligned() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Boolean.getBoolean",
        "getBoolean"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return !Boolean.getBoolean(\"UNALIGNED\");\n    }",
      "line_number": 128,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "supportUnalignedAccess",
      "signature": "private static boolean supportUnalignedAccess() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "arch.matches",
        "matches"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        String arch = getProperty(\"os.arch\");\n        if (arch == null) {\n            return false;\n        }\n        return arch.matches(\"^(i[3-6]86|x86(_64)?|x64|amd64)$\");\n    }",
      "line_number": 132,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getProperty",
      "signature": "private static String getProperty(final String key) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static",
        "final"
      ],
      "dependencies": [
        "System.getSecurityManager",
        "PrivilegedAction",
        "doPrivileged",
        "String",
        "getSecurityManager",
        "isEmpty",
        "IllegalArgumentException",
        "getProperty",
        "System.getProperty",
        "AccessController.doPrivileged",
        "key.isEmpty"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "immutable_object",
        "thread_local_storage"
      ],
      "complexity_score": 9,
      "source_code": "        if (key == null || key.isEmpty()) {\n            throw new IllegalArgumentException(\"key must not be empty.\");\n        }\n\n        try {\n            if (System.getSecurityManager() == null) {\n                return System.getProperty(key);\n            } else {\n                return AccessController.doPrivileged(new PrivilegedAction<String>() {\n                    @Override\n                    public String run() {\n                        return System.getProperty(key);\n                    }\n                });\n            }\n        } catch (Exception e) {\n            return null;\n        }\n    }",
      "line_number": 140,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "run",
      "signature": "public String run() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "System.getProperty",
        "getProperty"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "                        return System.getProperty(key);\n                    }",
      "line_number": 151,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "nativeOrder",
      "signature": "public static ByteOrder nativeOrder() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "nativeOrder",
        "ByteOrder.nativeOrder"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return ByteOrder.nativeOrder();\n    }",
      "line_number": 161,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getOrder",
      "signature": "public static ByteOrder getOrder() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return ByteOrder.BIG_ENDIAN;\n    }",
      "line_number": 165,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAddressSize",
      "signature": "public static int getAddressSize() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "addressSize",
        "unsafe.addressSize"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.addressSize();\n    }",
      "line_number": 169,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getPageSize",
      "signature": "public static int getPageSize() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "pageSize",
        "unsafe.pageSize"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.pageSize();\n    }",
      "line_number": 173,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "arrayBaseOffset",
      "signature": "public static int arrayBaseOffset(Class clazz) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "arrayBaseOffset",
        "unsafe.arrayBaseOffset"
      ],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.arrayBaseOffset(clazz);\n    }",
      "line_number": 177,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "arrayIndexScale",
      "signature": "public static int arrayIndexScale(Class clazz) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.arrayIndexScale",
        "arrayIndexScale"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.arrayIndexScale(clazz);\n    }",
      "line_number": 181,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "is2BytesAligned",
      "signature": "public static boolean is2BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (address & 0x01) == 0;\n    }",
      "line_number": 185,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "is4BytesAligned",
      "signature": "public static boolean is4BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (address & 0x03) == 0;\n    }",
      "line_number": 189,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "is8BytesAligned",
      "signature": "public static boolean is8BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (address & 0x07) == 0;\n    }",
      "line_number": 193,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "isReferenceAligned",
      "signature": "public static boolean isReferenceAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return (address & (OBJECT_REFERENCE_ALIGN - 1)) == 0;\n    }",
      "line_number": 197,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "assertReferenceAligned",
      "signature": "public static void assertReferenceAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (!isReferenceAligned(address)) {\n            throw new IllegalArgumentException(\"Memory access to object references must be \"\n                    + OBJECT_REFERENCE_ALIGN + \"-bytes aligned, but the address usecd was \" + address);\n        }\n    }",
      "line_number": 201,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "assert2BytesAligned",
      "signature": "public static void assert2BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "compare_and_swap",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        if (!is2BytesAligned(address)) {\n            throw new IllegalArgumentException(\"Atomic memory access must be aligned, but the address used was \" + address);\n        }\n    }",
      "line_number": 208,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "assert4BytesAligned",
      "signature": "public static void assert4BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "compare_and_swap",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        if (!is4BytesAligned(address)) {\n            throw new IllegalArgumentException(\"Atomic memory access must be aligned, but the address used was \" + address);\n        }\n    }",
      "line_number": 214,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "assert8BytesAligned",
      "signature": "public static void assert8BytesAligned(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "compare_and_swap",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        if (!is8BytesAligned(address)) {\n            throw new IllegalArgumentException(\"Atomic memory access must be aligned, but the address used was \" + address);\n        }\n    }",
      "line_number": 220,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getByte",
      "signature": "public static byte getByte(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getByte",
        "unsafe.getByte"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.getByte(address);\n    }",
      "line_number": 227,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putByte",
      "signature": "public static void putByte(long address, byte value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.putByte",
        "putByte"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.putByte(address, value);\n    }",
      "line_number": 231,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getByte",
      "signature": "public static byte getByte(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getByte",
        "unsafe.getByte"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.getByte(object, offset);\n    }",
      "line_number": 235,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putByte",
      "signature": "public static void putByte(Object object, long offset, byte value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.putByte",
        "putByte"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.putByte(object, offset, value);\n    }",
      "line_number": 239,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getByteVolatile",
      "signature": "public static byte getByteVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.getByteVolatile",
        "getByteVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return unsafe.getByteVolatile(object, offset);\n    }",
      "line_number": 243,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putByteVolatile",
      "signature": "public static void putByteVolatile(Object object, long offset, byte value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.putByteVolatile",
        "putByteVolatile"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        unsafe.putByteVolatile(object, offset, value);\n    }",
      "line_number": 247,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getByteVolatile",
      "signature": "public static byte getByteVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.getByteVolatile",
        "getByteVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return unsafe.getByteVolatile(null, address);\n    }",
      "line_number": 251,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putByteVolatile",
      "signature": "public static void putByteVolatile(long address, byte value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.putByteVolatile",
        "putByteVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        unsafe.putByteVolatile(null, address, value);\n    }",
      "line_number": 255,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShortByByte",
      "signature": "private static short getShortByByte(Object object, long offset, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.toShort",
        "toShort"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toShort(getByte(object, offset), getByte(object, offset + 1));\n        } else {\n            return Bits.toShort(getByte(object, offset + 1), getByte(object, offset));\n        }\n    }",
      "line_number": 260,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShortByByte",
      "signature": "private static void putShortByByte(Object object, long offset, short value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.short0",
        "short1",
        "short0",
        "Bits.short1"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(object, offset, Bits.short1(value));\n            putByte(object, offset + 1, Bits.short0(value));\n        } else {\n            putByte(object, offset, Bits.short0(value));\n            putByte(object, offset + 1, Bits.short1(value));\n        }\n    }",
      "line_number": 268,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShortByByte",
      "signature": "private static short getShortByByte(long address, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.toShort",
        "toShort"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toShort(getByte(address), getByte(address + 1));\n        } else {\n            return Bits.toShort(getByte(address + 1), getByte(address));\n        }\n    }",
      "line_number": 278,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShortByByte",
      "signature": "private static void putShortByByte(long address, short value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.short0",
        "short1",
        "short0",
        "Bits.short1"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(address, Bits.short1(value));\n            putByte(address + 1, Bits.short0(value));\n        } else {\n            putByte(address, Bits.short0(value));\n            putByte(address + 1, Bits.short1(value));\n        }\n    }",
      "line_number": 287,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getCharByByte",
      "signature": "private static char getCharByByte(Object object, long offset, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toChar",
        "Bits.toChar"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toChar(getByte(object, offset), getByte(object, offset + 1));\n        } else {\n            return Bits.toChar(getByte(object, offset + 1), getByte(object, offset));\n        }\n    }",
      "line_number": 298,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putCharByByte",
      "signature": "private static void putCharByByte(Object object, long offset, char value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.char0",
        "char0",
        "Bits.char1",
        "char1"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(object, offset, Bits.char1(value));\n            putByte(object, offset + 1, Bits.char0(value));\n        } else {\n            putByte(object, offset, Bits.char0(value));\n            putByte(object, offset + 1, Bits.char1(value));\n        }\n    }",
      "line_number": 307,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getCharByByte",
      "signature": "private static char getCharByByte(long address, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toChar",
        "Bits.toChar"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toChar(getByte(address), getByte(address + 1));\n        } else {\n            return Bits.toChar(getByte(address + 1), getByte(address));\n        }\n    }",
      "line_number": 317,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putCharByByte",
      "signature": "private static void putCharByByte(long address, char value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.char0",
        "char0",
        "Bits.char1",
        "char1"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(address, Bits.char1(value));\n            putByte(address + 1, Bits.char0(value));\n        } else {\n            putByte(address, Bits.char0(value));\n            putByte(address + 1, Bits.char1(value));\n        }\n    }",
      "line_number": 326,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getIntByByte",
      "signature": "private static int getIntByByte(Object object, long offset, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toInt",
        "Bits.toInt"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toInt(getByte(object, offset),\n                    getByte(object, offset + 1),\n                    getByte(object, offset + 2),\n                    getByte(object, offset + 3));\n        } else {\n            return Bits.toInt(getByte(object, offset + 3),\n                    getByte(object, offset + 2),\n                    getByte(object, offset + 1),\n                    getByte(object, offset));\n        }\n    }",
      "line_number": 337,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putIntByByte",
      "signature": "private static void putIntByByte(Object object, long offset, int value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.int2",
        "int1",
        "int3",
        "int2",
        "Bits.int1",
        "Bits.int0",
        "int0",
        "Bits.int3"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(object, offset, Bits.int3(value));\n            putByte(object, offset + 1, Bits.int2(value));\n            putByte(object, offset + 2, Bits.int1(value));\n            putByte(object, offset + 3, Bits.int0(value));\n        } else {\n            putByte(object, offset + 3, Bits.int3(value));\n            putByte(object, offset + 2, Bits.int2(value));\n            putByte(object, offset + 1, Bits.int1(value));\n            putByte(object, offset, Bits.int0(value));\n        }\n    }",
      "line_number": 351,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getIntByByte",
      "signature": "private static int getIntByByte(long address, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toInt",
        "Bits.toInt"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toInt(getByte(address),\n                    getByte(address + 1),\n                    getByte(address + 2),\n                    getByte(address + 3));\n        } else {\n            return Bits.toInt(getByte(address + 3),\n                    getByte(address + 2),\n                    getByte(address + 1),\n                    getByte(address));\n        }\n    }",
      "line_number": 365,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putIntByByte",
      "signature": "private static void putIntByByte(long address, int value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.int2",
        "int1",
        "int3",
        "int2",
        "Bits.int1",
        "Bits.int0",
        "int0",
        "Bits.int3"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(address, Bits.int3(value));\n            putByte(address + 1, Bits.int2(value));\n            putByte(address + 2, Bits.int1(value));\n            putByte(address + 3, Bits.int0(value));\n        } else {\n            putByte(address + 3, Bits.int3(value));\n            putByte(address + 2, Bits.int2(value));\n            putByte(address + 1, Bits.int1(value));\n            putByte(address, Bits.int0(value));\n        }\n    }",
      "line_number": 379,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLongByByte",
      "signature": "private static long getLongByByte(Object object, long offset, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toLong",
        "Bits.toLong"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toLong(getByte(object, offset),\n                    getByte(object, offset + 1),\n                    getByte(object, offset + 2),\n                    getByte(object, offset + 3),\n                    getByte(object, offset + 4),\n                    getByte(object, offset + 5),\n                    getByte(object, offset + 6),\n                    getByte(object, offset + 7));\n        } else {\n            return Bits.toLong(getByte(object, offset + 7),\n                    getByte(object, offset + 6),\n                    getByte(object, offset + 5),\n                    getByte(object, offset + 4),\n                    getByte(object, offset + 3),\n                    getByte(object, offset + 2),\n                    getByte(object, offset + 1),\n                    getByte(object, offset));\n        }\n    }",
      "line_number": 394,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLongByByte",
      "signature": "private static void putLongByByte(Object object, long offset, long value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "long3",
        "long4",
        "long2",
        "Bits.long2",
        "long6",
        "long7",
        "Bits.long3",
        "Bits.long6",
        "Bits.long4",
        "long1",
        "Bits.long5",
        "Bits.long1",
        "Bits.long0",
        "long0",
        "long5",
        "Bits.long7"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(object, offset, Bits.long7(value));\n            putByte(object, offset + 1, Bits.long6(value));\n            putByte(object, offset + 2, Bits.long5(value));\n            putByte(object, offset + 3, Bits.long4(value));\n            putByte(object, offset + 4, Bits.long3(value));\n            putByte(object, offset + 5, Bits.long2(value));\n            putByte(object, offset + 6, Bits.long1(value));\n            putByte(object, offset + 7, Bits.long0(value));\n        } else {\n            putByte(object, offset + 7, Bits.long7(value));\n            putByte(object, offset + 6, Bits.long6(value));\n            putByte(object, offset + 5, Bits.long5(value));\n            putByte(object, offset + 4, Bits.long4(value));\n            putByte(object, offset + 3, Bits.long3(value));\n            putByte(object, offset + 2, Bits.long2(value));\n            putByte(object, offset + 1, Bits.long1(value));\n            putByte(object, offset, Bits.long0(value));\n        }\n    }",
      "line_number": 417,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLongByByte",
      "signature": "private static long getLongByByte(long address, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "toLong",
        "Bits.toLong"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            return Bits.toLong(getByte(address),\n                    getByte(address + 1),\n                    getByte(address + 2),\n                    getByte(address + 3),\n                    getByte(address + 4),\n                    getByte(address + 5),\n                    getByte(address + 6),\n                    getByte(address + 7));\n        } else {\n            return Bits.toLong(getByte(address + 7),\n                    getByte(address + 6),\n                    getByte(address + 5),\n                    getByte(address + 4),\n                    getByte(address + 3),\n                    getByte(address + 2),\n                    getByte(address + 1),\n                    getByte(address));\n        }\n    }",
      "line_number": 440,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLongByByte",
      "signature": "private static void putLongByByte(long address, long value, boolean bigEndian) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "long3",
        "long4",
        "long2",
        "Bits.long2",
        "long6",
        "long7",
        "Bits.long3",
        "Bits.long6",
        "Bits.long4",
        "long1",
        "Bits.long5",
        "Bits.long1",
        "Bits.long0",
        "long0",
        "long5",
        "Bits.long7"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        if (bigEndian) {\n            putByte(address, Bits.long7(value));\n            putByte(address + 1, Bits.long6(value));\n            putByte(address + 2, Bits.long5(value));\n            putByte(address + 3, Bits.long4(value));\n            putByte(address + 4, Bits.long3(value));\n            putByte(address + 5, Bits.long2(value));\n            putByte(address + 6, Bits.long1(value));\n            putByte(address + 7, Bits.long0(value));\n        } else {\n            putByte(address + 7, Bits.long7(value));\n            putByte(address + 6, Bits.long6(value));\n            putByte(address + 5, Bits.long5(value));\n            putByte(address + 4, Bits.long4(value));\n            putByte(address + 3, Bits.long3(value));\n            putByte(address + 2, Bits.long2(value));\n            putByte(address + 1, Bits.long1(value));\n            putByte(address, Bits.long0(value));\n        }\n    }",
      "line_number": 463,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getBoolean",
      "signature": "public static boolean getBoolean(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getBoolean",
        "unsafe.getBoolean"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return unsafe.getBoolean(object, offset);\n    }",
      "line_number": 485,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putBoolean",
      "signature": "public static void putBoolean(Object object, long offset, boolean value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "putBoolean",
        "unsafe.putBoolean"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.putBoolean(object, offset, value);\n    }",
      "line_number": 489,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShort",
      "signature": "public static short getShort(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getShort",
        "unsafe.getShort"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(offset);\n        if (ALIGNED) {\n            short value = unsafe.getShort(object, offset);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getShortByByte(object, offset, true);\n    }",
      "line_number": 493,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShort",
      "signature": "public static void putShort(Object object, long offset, short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "putShort",
        "swap",
        "unsafe.putShort"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(offset);\n        if (ALIGNED) {\n            unsafe.putShort(object, offset, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putShortByByte(object, offset, value, true);\n        }\n    }",
      "line_number": 502,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getChar",
      "signature": "public static char getChar(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getChar",
        "unsafe.getChar"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(offset);\n        if (ALIGNED) {\n            char value = unsafe.getChar(object, offset);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getCharByByte(object, offset, true);\n    }",
      "line_number": 511,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putChar",
      "signature": "public static void putChar(Object object, long offset, char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "putChar",
        "unsafe.putChar",
        "swap"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(offset);\n        if (ALIGNED) {\n            unsafe.putChar(object, offset, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putCharByByte(object, offset, value, true);\n        }\n    }",
      "line_number": 520,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getInt",
      "signature": "public static int getInt(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getInt",
        "unsafe.getInt"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(offset);\n        if (ALIGNED) {\n            int value = unsafe.getInt(object, offset);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getIntByByte(object, offset, true);\n    }",
      "line_number": 529,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putInt",
      "signature": "public static void putInt(Object object, long offset, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.putInt",
        "putInt"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(offset);\n        if (ALIGNED) {\n            unsafe.putInt(object, offset, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putIntByByte(object, offset, value, true);\n        }\n    }",
      "line_number": 538,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLong",
      "signature": "public static long getLong(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getLong",
        "unsafe.getLong"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(offset);\n        if (ALIGNED) {\n            long value = unsafe.getLong(object, offset);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getLongByByte(object, offset, true);\n    }",
      "line_number": 547,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLong",
      "signature": "public static void putLong(Object object, long offset, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "putLong",
        "swap",
        "Bits.swap",
        "unsafe.putLong"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(offset);\n        if (ALIGNED) {\n            unsafe.putLong(object, offset, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putLongByByte(object, offset, value, true);\n        }\n    }",
      "line_number": 556,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShort",
      "signature": "public static short getShort(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getShort",
        "unsafe.getShort"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(address);\n        if (ALIGNED) {\n            short value = unsafe.getShort(address);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getShortByByte(address, true);\n    }",
      "line_number": 566,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getUnsignedShort",
      "signature": "public static int getUnsignedShort(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        assert2BytesAligned(address);\n        return getShort(address) & 0xffff;\n    }",
      "line_number": 575,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShort",
      "signature": "public static void putShort(long address, short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "putShort",
        "swap",
        "unsafe.putShort"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(address);\n        if (ALIGNED) {\n            unsafe.putShort(address, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putShortByByte(address, value, true);\n        }\n    }",
      "line_number": 580,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putUnsignedShort",
      "signature": "public static void putUnsignedShort(long address, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        assert2BytesAligned(address);\n        putShort(address, (short) value);\n    }",
      "line_number": 589,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getChar",
      "signature": "public static char getChar(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getChar",
        "unsafe.getChar"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(address);\n        if (ALIGNED) {\n            char value = unsafe.getChar(address);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getCharByByte(address, true);\n    }",
      "line_number": 594,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putChar",
      "signature": "public static void putChar(long address, char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "putChar",
        "unsafe.putChar",
        "swap"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        assert2BytesAligned(address);\n        if (ALIGNED) {\n            unsafe.putChar(address, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putCharByByte(address, value, true);\n        }\n    }",
      "line_number": 603,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getInt",
      "signature": "public static int getInt(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getInt",
        "unsafe.getInt"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(address);\n        if (ALIGNED) {\n            int value = unsafe.getInt(address);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getIntByByte(address, true);\n    }",
      "line_number": 612,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putInt",
      "signature": "public static void putInt(long address, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.putInt",
        "putInt"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(address);\n        if (ALIGNED) {\n            unsafe.putInt(address, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putIntByByte(address, value, true);\n        }\n    }",
      "line_number": 621,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLong",
      "signature": "public static long getLong(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getLong",
        "unsafe.getLong"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(address);\n        if (ALIGNED) {\n            long value = unsafe.getLong(address);\n            return (BIG_ENDIAN ? value : Bits.swap(value));\n        }\n        return getLongByByte(address, true);\n    }",
      "line_number": 630,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLong",
      "signature": "public static void putLong(long address, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "putLong",
        "swap",
        "Bits.swap",
        "unsafe.putLong"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(address);\n        if (ALIGNED) {\n            unsafe.putLong(address, (BIG_ENDIAN ? value : Bits.swap(value)));\n        } else {\n            putLongByByte(address, value, true);\n        }\n    }",
      "line_number": 639,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "compareAndSwapInt",
      "signature": "public static boolean compareAndSwapInt(Object object, long offset, int expected, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.compareAndSwapInt",
        "compareAndSwapInt"
      ],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            return unsafe.compareAndSwapInt(object, offset, expected, value);\n        }\n        return unsafe.compareAndSwapInt(object, offset, Bits.swap(expected), Bits.swap(value));\n    }",
      "line_number": 648,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "compareAndSwapLong",
      "signature": "public static boolean compareAndSwapLong(Object object, long offset, long expected, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.compareAndSwapLong",
        "compareAndSwapLong"
      ],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            return unsafe.compareAndSwapLong(object, offset, expected, value);\n        }\n        return unsafe.compareAndSwapLong(object, offset, Bits.swap(expected), Bits.swap(value));\n    }",
      "line_number": 656,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "compareAndSwapInt",
      "signature": "public static boolean compareAndSwapInt(long address, int expected, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return compareAndSwapInt(null, address, expected, value);\n    }",
      "line_number": 664,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "compareAndSwapLong",
      "signature": "public static boolean compareAndSwapLong(long address, long expected, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return compareAndSwapLong(null, address, expected, value);\n    }",
      "line_number": 668,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getBooleanVolatile",
      "signature": "public static boolean getBooleanVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.getBooleanVolatile",
        "getBooleanVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return unsafe.getBooleanVolatile(object, offset);\n    }",
      "line_number": 673,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putBooleanVolatile",
      "signature": "public static void putBooleanVolatile(Object object, long offset, boolean value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "putBooleanVolatile",
        "unsafe.putBooleanVolatile"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        unsafe.putBooleanVolatile(object, offset, value);\n    }",
      "line_number": 677,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getBooleanVolatile",
      "signature": "public static boolean getBooleanVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.getBooleanVolatile",
        "getBooleanVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return unsafe.getBooleanVolatile(null, address);\n    }",
      "line_number": 681,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putBooleanVolatile",
      "signature": "public static void putBooleanVolatile(long address, boolean value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "putBooleanVolatile",
        "unsafe.putBooleanVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        unsafe.putBooleanVolatile(null, address, value);\n    }",
      "line_number": 685,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShortVolatile",
      "signature": "public static short getShortVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.getShortVolatile",
        "getShortVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        assert2BytesAligned(offset);\n        short value = unsafe.getShortVolatile(object, offset);\n        return (BIG_ENDIAN ? value : Bits.swap(value));\n    }",
      "line_number": 689,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getShortVolatile",
      "signature": "public static short getShortVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return getShortVolatile(null, address);\n    }",
      "line_number": 695,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShortVolatile",
      "signature": "public static void putShortVolatile(Object object, long offset, short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "unsafe.putShortVolatile",
        "putShortVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 11,
      "source_code": "        assert2BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putShortVolatile(object, offset, value);\n        } else {\n            unsafe.putShortVolatile(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 699,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putShortVolatile",
      "signature": "public static void putShortVolatile(long address, short value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        putShortVolatile(null, address, value);\n    }",
      "line_number": 708,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getCharVolatile",
      "signature": "public static char getCharVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "getCharVolatile",
        "unsafe.getCharVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        assert2BytesAligned(offset);\n        char value = unsafe.getCharVolatile(object, offset);\n        return (BIG_ENDIAN ? value : Bits.swap(value));\n    }",
      "line_number": 712,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getCharVolatile",
      "signature": "public static char getCharVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return getCharVolatile(null, address);\n    }",
      "line_number": 718,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putCharVolatile",
      "signature": "public static void putCharVolatile(Object object, long offset, char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.putCharVolatile",
        "swap",
        "Bits.swap",
        "putCharVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 11,
      "source_code": "        assert2BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putCharVolatile(object, offset, value);\n        } else {\n            unsafe.putCharVolatile(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 722,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putCharVolatile",
      "signature": "public static void putCharVolatile(long address, char value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        putCharVolatile(null, address, value);\n    }",
      "line_number": 731,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getIntVolatile",
      "signature": "public static int getIntVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "getIntVolatile",
        "swap",
        "unsafe.getIntVolatile",
        "Bits.swap"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        assert4BytesAligned(offset);\n        int value = unsafe.getIntVolatile(object, offset);\n        return (BIG_ENDIAN ? value : Bits.swap(value));\n    }",
      "line_number": 735,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getIntVolatile",
      "signature": "public static int getIntVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return getIntVolatile(null, address);\n    }",
      "line_number": 741,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putIntVolatile",
      "signature": "public static void putIntVolatile(Object object, long offset, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "putIntVolatile",
        "swap",
        "unsafe.putIntVolatile",
        "Bits.swap"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 11,
      "source_code": "        assert4BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putIntVolatile(object, offset, value);\n        } else {\n            unsafe.putIntVolatile(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 745,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putIntVolatile",
      "signature": "public static void putIntVolatile(long address, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        putIntVolatile(null, address, value);\n    }",
      "line_number": 754,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLongVolatile",
      "signature": "public static long getLongVolatile(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "unsafe.getLongVolatile",
        "swap",
        "Bits.swap",
        "getLongVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        assert8BytesAligned(offset);\n        long value = unsafe.getLongVolatile(object, offset);\n        return (BIG_ENDIAN ? value : Bits.swap(value));\n    }",
      "line_number": 758,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getLongVolatile",
      "signature": "public static long getLongVolatile(long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        return getLongVolatile(null, address);\n    }",
      "line_number": 764,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLongVolatile",
      "signature": "public static void putLongVolatile(Object object, long offset, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [
        "putLongVolatile",
        "swap",
        "Bits.swap",
        "unsafe.putLongVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 11,
      "source_code": "        assert8BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putLongVolatile(object, offset, value);\n        } else {\n            unsafe.putLongVolatile(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 768,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putLongVolatile",
      "signature": "public static void putLongVolatile(long address, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "double_checked_locking",
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        putLongVolatile(null, address, value);\n    }",
      "line_number": 777,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putOrderedInt",
      "signature": "public static void putOrderedInt(Object object, long offset, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.putOrderedInt",
        "swap",
        "putOrderedInt",
        "Bits.swap"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert4BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putOrderedInt(object, offset, value);\n        } else {\n            unsafe.putOrderedInt(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 782,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putOrderedInt",
      "signature": "public static void putOrderedInt(long address, int value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        putOrderedInt(null, address, value);\n    }",
      "line_number": 791,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putOrderedLong",
      "signature": "public static void putOrderedLong(Object object, long offset, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "Bits.swap",
        "swap",
        "putOrderedLong",
        "unsafe.putOrderedLong"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        assert8BytesAligned(offset);\n        if (BIG_ENDIAN) {\n            unsafe.putOrderedLong(object, offset, value);\n        } else {\n            unsafe.putOrderedLong(object, offset, Bits.swap(value));\n        }\n    }",
      "line_number": 795,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "putOrderedLong",
      "signature": "public static void putOrderedLong(long address, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "producer_consumer",
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        putOrderedLong(null, address, value);\n    }",
      "line_number": 804,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndAddInt",
      "signature": "public static int getAndAddInt(Object object, long offset, int delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "getAndAdd",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        int value;\n        do {\n            value = getIntVolatile(object, offset);\n        } while (!compareAndSwapInt(object, offset, value, value + delta));\n\n        return value;\n    }",
      "line_number": 809,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndAddInt",
      "signature": "public static int getAndAddInt(long address, int delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "getAndAdd",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return getAndAddInt(null, address, delta);\n    }",
      "line_number": 818,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndAddLong",
      "signature": "public static long getAndAddLong(Object object, long offset, long delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "getAndAdd",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        long value;\n        do {\n            value = getLongVolatile(object, offset);\n        } while (!compareAndSwapLong(object, offset, value, value + delta));\n\n        return value;\n    }",
      "line_number": 822,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndAddLong",
      "signature": "public static long getAndAddLong(long address, long delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "getAndAdd",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return getAndAddLong(null, address, delta);\n    }",
      "line_number": 831,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndSetInt",
      "signature": "public static int getAndSetInt(Object object, long offset, int delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static",
        "getAndSet"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        int value;\n        do {\n            value = getIntVolatile(object, offset);\n        } while (!compareAndSwapInt(object, offset, value, delta));\n\n        return value;\n    }",
      "line_number": 835,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndSetInt",
      "signature": "public static int getAndSetInt(long address, int delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static",
        "getAndSet"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return getAndSetInt(null, address, delta);\n    }",
      "line_number": 844,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndSetLong",
      "signature": "public static long getAndSetLong(Object object, long offset, long delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "static",
        "getAndSet"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        long value;\n        do {\n            value = getLongVolatile(object, offset);\n        } while (!compareAndSwapLong(object, offset, value, delta));\n\n        return value;\n    }",
      "line_number": 848,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "copyMemory",
      "signature": "public static void copyMemory(Object src, long srcOffset, Object dst, long dstOffset, long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.copyMemory",
        "min",
        "copyMemory",
        "Math.min"
      ],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        while (length > 0) {\n            long size = Math.min(length, UNSAFE_COPY_THRESHOLD);\n            unsafe.copyMemory(src, srcOffset, dst, dstOffset, size);\n            length -= size;\n            srcOffset += size;\n            dstOffset += size;\n        }\n    }",
      "line_number": 857,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "memory_management",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getAndSetLong",
      "signature": "public static long getAndSetLong(long address, long delta) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static",
        "getAndSet"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return getAndSetLong(null, address, delta);\n    }",
      "line_number": 867,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getObject",
      "signature": "public static Object getObject(Object object, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "getObject",
        "UNSAFE.getObject"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        assertReferenceAligned(offset);\n        return UNSAFE.getObject(object, offset);\n    }",
      "line_number": 871,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "setBytes",
      "signature": "public static void setBytes(Object src, long address, long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        copyMemory(src, BYTE_ARRAY_OFFSET, null, address, length);\n    }",
      "line_number": 877,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getBytes",
      "signature": "public static void getBytes(long address, Object dst, long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        copyMemory(null, address, dst, BYTE_ARRAY_OFFSET, length);\n    }",
      "line_number": 881,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "setBytes",
      "signature": "public static void setBytes(Object src, long srcOffset, long address, long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        copyMemory(src, BYTE_ARRAY_OFFSET + srcOffset, null, address, length);\n    }",
      "line_number": 885,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "getBytes",
      "signature": "public static void getBytes(long address, Object dst, long dstOffset, long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        copyMemory(null, address, dst, BYTE_ARRAY_OFFSET + dstOffset, length);\n    }",
      "line_number": 889,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "fullFence",
      "signature": "public static void fullFence() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "fullFence",
        "unsafe.fullFence"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.fullFence();\n    }",
      "line_number": 893,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "storeFence",
      "signature": "public static void storeFence() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.storeFence",
        "storeFence"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.storeFence();\n    }",
      "line_number": 897,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "loadFence",
      "signature": "public static void loadFence() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/util/UNSAFE.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "unsafe.loadFence",
        "loadFence"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        unsafe.loadFence();\n    }",
      "line_number": 901,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "UNSAFE",
      "method_type": "method"
    },
    {
      "name": "MappedFile",
      "signature": "private MappedFile(RandomAccessFile raf, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "raf.getChannel",
        "Util.pageAlign",
        "getChannel",
        "pageAlign"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        this.raf = raf;\n        this.size = Util.pageAlign(size);\n        this.channel = raf.getChannel();\n        this.address = map();\n    }",
      "line_number": 43,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "constructor"
    },
    {
      "name": "with",
      "signature": "public static MappedFile with(String file, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "File"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return with(new File(file), size);\n    }",
      "line_number": 50,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "with",
      "signature": "public static MappedFile with(File file, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return with(file, false, size);\n    }",
      "line_number": 54,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "as",
      "signature": "public static MappedFile as(String file) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "File",
        "exists",
        "f.length",
        "isFile",
        "length",
        "IllegalArgumentException",
        "f.exists",
        "f.isFile",
        "FileNotFoundException"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 2,
      "source_code": "        File f = new File(file);\n        if (!f.exists() || !f.isFile()) {\n            throw new IllegalArgumentException(new FileNotFoundException());\n        }\n        return with(f, f.length());\n    }",
      "line_number": 61,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "with",
      "signature": "public static MappedFile with(String file, boolean overwrite, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "File"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return with(new File(file), overwrite, size);\n    }",
      "line_number": 69,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "with",
      "signature": "public static MappedFile with(File file, boolean overwrite, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "parentFile.exists",
        "RuntimeException",
        "RandomAccessFile",
        "file.exists",
        "file.createNewFile",
        "exists",
        "mkdirs",
        "parentFile.mkdirs",
        "file.delete",
        "file.getParentFile",
        "MappedFile",
        "delete",
        "getParentFile",
        "createNewFile",
        "IllegalArgumentException"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 16,
      "source_code": "        File parentFile = file.getParentFile();\n        if (parentFile != null && !parentFile.exists()) {\n            parentFile.mkdirs();\n        }\n        if (overwrite && file.exists()) {\n            if (file.delete()) {\n                try {\n                    file.createNewFile();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n\n        if (size <= 0) {\n            throw new IllegalArgumentException(\"The specified file size must greater than 0\");\n        }\n\n        RandomAccessFile raf = null;\n        try {\n            raf = new RandomAccessFile(file, \"rw\");\n        } catch (FileNotFoundException ex) {\n            throw new IllegalArgumentException(\"The specified file not found\", ex);\n        }\n\n        return new MappedFile(raf, size);\n    }",
      "line_number": 73,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "getSize",
      "signature": "public long getSize() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return size;\n    }",
      "line_number": 102,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "general",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "getAddress",
      "signature": "public long getAddress() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return address;\n    }",
      "line_number": 106,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "general",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "map",
      "signature": "private long map() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock",
        "final",
        "release"
      ],
      "dependencies": [
        "RuntimeException",
        "setLength",
        "release",
        "lock.release",
        "get",
        "closed.get",
        "raf.setLength",
        "IllegalArgumentException",
        "lock",
        "channel.lock"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "immutable_object",
        "thread_local_storage"
      ],
      "complexity_score": 26,
      "source_code": "        if (closed.get()) {\n            throw new IllegalArgumentException(\"MappedFile has been closed\");\n        }\n        try {\n            FileLock lock = channel.lock();\n            try {\n                raf.setLength(size);\n            } finally {\n                lock.release();\n            }\n            return map0(channel, FileChannel.MapMode.READ_WRITE, 0L, size);\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n    }",
      "line_number": 110,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "unmap",
      "signature": "public void unmap() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "compareAndSet"
      ],
      "dependencies": [
        "RuntimeException",
        "compareAndSet",
        "channel.force",
        "closed.compareAndSet",
        "force",
        "raf.close",
        "close"
      ],
      "concurrency_patterns": [
        "compare_and_swap",
        "thread_local_storage"
      ],
      "complexity_score": 7,
      "source_code": "        if (!closed.compareAndSet(false, true)) {\n            return;\n        }\n        try {\n            channel.force(true);\n            unmap0(channel, address, size);\n\n            raf.close();\n        } catch (IOException ex) {\n            throw new RuntimeException(ex);\n        }\n    }",
      "line_number": 127,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "map0",
      "signature": "private static long map0(FileChannel fileChannel, FileChannel.MapMode mode, long position, long size)  {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "fileChannel.getClass",
        "Util.getMethod",
        "getMethod",
        "Util.isWindows",
        "Util.pageAlign",
        "IllegalArgumentException",
        "isWindows",
        "Util.invokeMethod",
        "invokeMethod",
        "pageAlign",
        "getClass"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "        if (position < 0) {\n            throw new IllegalArgumentException(\"Attempt to access a negative position: \" + position);\n        }\n\n        if (Util.isWindows() && size > 4L << 30) {\n            throw new IllegalArgumentException(\"Mapping more than 4096 MB is unusable on Windows, size = \" + (size >> 20) + \" MiB\");\n        }\n\n        Method map0 = Util.getMethod(fileChannel.getClass(), \"map0\", int.class, long.class, long.class);\n        return (Long) Util.invokeMethod(map0, fileChannel, modeFor(mode), mapAlign(position), Util.pageAlign(size));\n    }",
      "line_number": 141,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "unmap0",
      "signature": "private static void unmap0(FileChannel fileChannel, long address, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "fileChannel.getClass",
        "Util.getMethod",
        "getMethod",
        "Util.pageAlign",
        "Util.invokeMethod",
        "invokeMethod",
        "pageAlign",
        "getClass"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        Method unmap0 = Util.getMethod(fileChannel.getClass(), \"unmap0\", long.class, long.class);\n        Util.invokeMethod(unmap0, null, address, Util.pageAlign(size));\n    }",
      "line_number": 154,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "modeFor",
      "signature": "private static int modeFor(FileChannel.MapMode mapMode) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "PRIVATE.equals",
        "READ_WRITE.equals",
        "READ_ONLY.equals",
        "equals"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 6,
      "source_code": "        int mode = -1;\n        if (FileChannel.MapMode.READ_ONLY.equals(mapMode)) {\n            mode = 0;\n        } else if (FileChannel.MapMode.READ_WRITE.equals(mapMode)) {\n            mode = 1;\n        } else if (FileChannel.MapMode.PRIVATE.equals(mapMode)) {\n            mode = 2;\n        }\n        assert (mode >= 0);\n        return mode;\n    }",
      "line_number": 159,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "mapAlignment",
      "signature": "private static long mapAlignment() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "isWindows",
        "Util.isWindows"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Util.isWindows() ? 64 << 10 : Constant.PAGE_SIZE;\n    }",
      "line_number": 172,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "mapAlign",
      "signature": "private static long mapAlign(long position) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/file/MappedFile.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "align",
        "Util.align"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Util.align(position, mapAlignment());\n    }",
      "line_number": 176,
      "repository": "peptos/traffic-shm",
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "test_functions": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ],
      "domain": "data_structures",
      "class_name": "MappedFile",
      "method_type": "method"
    },
    {
      "name": "Queue",
      "signature": "private Queue(MappedFile mappedFile, int id, int index) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "getAddress",
        "getSize",
        "mappedFile.getSize",
        "metadata.readCursor",
        "metadata.writeCursor",
        "Metadata",
        "readCursor",
        "writeCursor",
        "mappedFile.getAddress"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        this.mappedFile = mappedFile;\n        this.id = id;\n        this.index = index;\n        this.capacity = mappedFile.getSize();\n        this.address = mappedFile.getAddress();\n        this.metadata = new Metadata(this.capacity, this.address);\n        this.readCursor = this.metadata.readCursor();\n        this.writeCursor = this.metadata.writeCursor();\n    }",
      "line_number": 43,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "constructor"
    },
    {
      "name": "map",
      "signature": "public static Queue map(String file, long size) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return map(file, size, 0, 0);\n    }",
      "line_number": 54,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "map",
      "signature": "public static Queue map(String file, long size, int id, int index) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "MappedFile.with",
        "with",
        "queue.init",
        "Queue",
        "init"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        Queue queue = new Queue(MappedFile.with(file, size), id, index);\n        queue.init();\n        return queue;\n    }",
      "line_number": 58,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "attach",
      "signature": "public static Queue attach(String file) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return attach(file, 0, 0);\n    }",
      "line_number": 68,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "attach",
      "signature": "public static Queue attach(String file, int id, int index) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "MappedFile.as",
        "Queue",
        "as"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        Queue queue = new Queue(MappedFile.as(file), id, index);\n        return queue;\n    }",
      "line_number": 72,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "close",
      "signature": "public void close() throws IOException {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "mappedFile.unmap",
        "unmap"
      ],
      "concurrency_patterns": [
        "double_checked_locking"
      ],
      "complexity_score": 2,
      "source_code": "        if (mappedFile != null) {\n            this.mappedFile.unmap();\n        }\n    }",
      "line_number": 78,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "poll",
      "signature": "public Block poll() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "offset",
        "readCursor.offset",
        "writeCursor.offset"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 4,
      "source_code": "        return read(readCursor.offset(), writeCursor.offset());\n    }",
      "line_number": 84,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "add",
      "signature": "public boolean add(Block block) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "IllegalStateException"
      ],
      "concurrency_patterns": [],
      "complexity_score": 14,
      "source_code": "        if (offer(block)) {\n            return true;\n        } else {\n            throw new IllegalStateException();\n        }\n    }",
      "line_number": 88,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "synchronization",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "offer",
      "signature": "public boolean offer(Block block) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "readCursor.offset",
        "writeCursor.offset",
        "getPayload",
        "notNull",
        "offset",
        "block.getPayload",
        "Assert.notNull"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 20,
      "source_code": "        Assert.notNull(block);\n        Assert.notNull(block.getPayload());\n\n        return 1 == write(writeCursor.offset(), readCursor.offset(), block);\n    }",
      "line_number": 96,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "producer_consumer",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "read",
      "signature": "private Block read(long read, long write) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "update",
        "isTraceEnabled",
        "println",
        "Tracer.isTraceEnabled",
        "getPayload",
        "sizeof",
        "readCursor.update",
        "Tracer.println",
        "block.getPayload",
        "block.sizeof",
        "Block.deserialize",
        "deserialize"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 42,
      "source_code": "        if (read == write) {\n            return null;\n        }\n\n        long offset = rescale(read);\n        Block block = Block.deserialize(this.capacity, this.address, offset);\n        if (block == null) {\n            return null;\n        }\n\n        long shift = read + block.sizeof();\n        if (readCursor.update(read, shift)) {\n            if (Tracer.isTraceEnabled()) {\n                Tracer.println(\"R=\" + read + \" W=\" + write + \" r=\" + rescale(read) + \" w=\" + rescale(write)\n                        + \" l=\" + block.getPayload().length + \" RS=\" + shift + \" rs=\" + rescale(shift) + \" FIN\");\n            }\n            return block;\n        }\n        return null;\n    }",
      "line_number": 103,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "write",
      "signature": "private int write(long write, long read, Block block) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "update",
        "isTraceEnabled",
        "println",
        "Tracer.isTraceEnabled",
        "sizeof",
        "Tracer.println",
        "block.serialize",
        "block.sizeof",
        "writeCursor.update",
        "serialize"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 33,
      "source_code": "        long available = this.capacity - Metadata.ORIGIN_OFFSET - write + read;\n\n        if (block.sizeof() > available - Constant.INT_SIZE) {\n            return -1;\n        }\n\n        long shift = write + block.sizeof();\n        if (writeCursor.update(write, shift)) {\n            long offset = rescale(write);\n            block.serialize(capacity, address, offset);\n            if (Tracer.isTraceEnabled()) {\n                Tracer.println(\"W=\" + write + \" R=\" + read + \" w=\" + rescale(write) + \" r=\" + rescale(read)\n                        + \" l=\" + block.sizeof() + \" WS=\" + shift + \" ws=\" + rescale(shift) + \" FIN\");\n            }\n            return 1;\n        }\n        return 0;\n    }",
      "line_number": 125,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "reset",
      "signature": "public boolean reset() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "update",
        "readCursor.offset",
        "writeCursor.offset",
        "offset",
        "writeCursor.update"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "       return writeCursor.update(writeCursor.offset(), readCursor.offset());\n    }",
      "line_number": 145,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "rescale",
      "signature": "private long rescale(long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Queue.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "Cursor.rescale",
        "rescale"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return Cursor.rescale(value, Metadata.ORIGIN_OFFSET, this.capacity);\n    }",
      "line_number": 150,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Queue",
      "method_type": "method"
    },
    {
      "name": "Metadata",
      "signature": "public Metadata(long capacity, long address) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "Cursor"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        this.capacity = capacity;\n        this.address = address;\n        this.read = new Cursor(this.address, READ_OFFSET);\n        this.write = new Cursor(this.address, WRITE_OFFSET);\n    }",
      "line_number": 60,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "constructor"
    },
    {
      "name": "initialize",
      "signature": "public void initialize(int id, int index) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "update",
        "read.update",
        "CRC16.hash",
        "UNSAFE.putUnsignedShort",
        "write.update",
        "putUnsignedShort",
        "hash",
        "putInt",
        "UNSAFE.putInt"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        UNSAFE.putInt(address + MAGIC_NUMBER_OFFSET, MAGIC_NUMBER);\n        UNSAFE.putUnsignedShort(address + MAJOR_VERSION_OFFSET, CRC16.hash(Constant.MAJOR_VERSION_ASYNC));\n\n        if (setId(id) && setIndex(index)\n                && read.update(0, Metadata.READ_INITIAL_VALUE)\n                && write.update(0, Metadata.WRITE_INITIAL_VALUE)) {\n        }\n    }",
      "line_number": 68,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "setId",
      "signature": "public boolean setId(int id) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "UNSAFE.compareAndSwapInt",
        "compareAndSwapInt"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return UNSAFE.compareAndSwapInt(address + ID_OFFSET, 0, id);\n    }",
      "line_number": 78,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "getId",
      "signature": "public int getId() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [
        "volatile"
      ],
      "dependencies": [
        "getIntVolatile",
        "UNSAFE.getIntVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        return UNSAFE.getIntVolatile(address + ID_OFFSET);\n    }",
      "line_number": 82,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "setIndex",
      "signature": "public boolean setIndex(int index) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "UNSAFE.compareAndSwapInt",
        "compareAndSwapInt"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return UNSAFE.compareAndSwapInt(address + INDEX_OFFSET, 0, index);\n    }",
      "line_number": 86,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "getIndex",
      "signature": "public int getIndex() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [
        "volatile"
      ],
      "dependencies": [
        "getIntVolatile",
        "UNSAFE.getIntVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        return UNSAFE.getIntVolatile(address + INDEX_OFFSET);\n    }",
      "line_number": 90,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "getVersion",
      "signature": "public String getVersion() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Metadata.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "getUnsignedShort",
        "UNSAFE.getUnsignedShort"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        int minor = UNSAFE.getUnsignedShort(address + MINOR_VERSION_OFFSET);\n        int major = UNSAFE.getUnsignedShort(address + MAJOR_VERSION_OFFSET);\n        return major + \".\" + minor;\n    }",
      "line_number": 94,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Metadata",
      "method_type": "method"
    },
    {
      "name": "Block",
      "signature": "public Block(byte[] payload) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "Assert.notEmpty",
        "notEmpty"
      ],
      "concurrency_patterns": [],
      "complexity_score": 4,
      "source_code": "        Assert.notEmpty(payload);\n        this.length = payload.length;\n        this.payload = payload;\n    }",
      "line_number": 39,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "synchronization",
      "class_name": "Block",
      "method_type": "constructor"
    },
    {
      "name": "serialize",
      "signature": "public void serialize(long capacity, long address, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock"
      ],
      "dependencies": [
        "setBytes",
        "UNSAFE.setBytes"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "thread_local_storage"
      ],
      "complexity_score": 11,
      "source_code": "        long available = capacity - offset;\n\n        if (available >= sizeof()) {\n            // no overflow\n            serialize(address, offset, available, capacity);\n        } else {\n            if (available < Constant.INT_SIZE) {\n                // whole block overflow\n                serialize(address, Metadata.ORIGIN_OFFSET, available, capacity);\n            } else if (available == Constant.INT_SIZE) {\n                // put length in, but payload overflow\n                serialize(address, offset, available, capacity);\n            } else {\n                // payload overflow\n                withLength(address, offset);\n                offset += Constant.INT_SIZE;\n                available -= Constant.INT_SIZE;\n\n                if (available > 0) {\n                    UNSAFE.setBytes(payload, address + offset, available);\n                }\n                UNSAFE.setBytes(payload, available, address + Metadata.ORIGIN_OFFSET, length - available);\n            }\n        }\n    }",
      "line_number": 45,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "serialize",
      "signature": "public void serialize(long address, long offset, long available, long capacity) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 2,
      "source_code": "        withLength(address, offset);\n        offset += Constant.INT_SIZE;\n        if (available == Constant.INT_SIZE) {\n            withPayload(address, Metadata.ORIGIN_OFFSET);\n        } else {\n            withPayload(address, offset);\n        }\n    }",
      "line_number": 72,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "withLength",
      "signature": "private void withLength(long address, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "volatile"
      ],
      "dependencies": [
        "putIntVolatile",
        "UNSAFE.putIntVolatile"
      ],
      "concurrency_patterns": [
        "producer_consumer",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        UNSAFE.putIntVolatile(address + offset, this.length);\n    }",
      "line_number": 82,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "withPayload",
      "signature": "private void withPayload(long address, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "setBytes",
        "UNSAFE.setBytes"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        UNSAFE.setBytes(this.payload, address + offset, this.length);\n    }",
      "line_number": 86,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "deserialize",
      "signature": "public static Block deserialize(long capacity, long address, long offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "Lock",
        "lock",
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 6,
      "source_code": "        long available = capacity - offset;\n        if (available < Constant.INT_SIZE) {\n            return deserialize(address, Metadata.ORIGIN_OFFSET, capacity - Metadata.ORIGIN_OFFSET, capacity);\n        } else {\n            return deserialize(address, offset, available, capacity);\n        }\n    }",
      "line_number": 90,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "deserialize",
      "signature": "private static Block deserialize(long address, long offset, long available, long capacity) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "volatile",
        "Lock",
        "lock",
        "static"
      ],
      "dependencies": [
        "getIntVolatile",
        "getBytes",
        "Block",
        "UNSAFE.getBytes",
        "UNSAFE.getIntVolatile"
      ],
      "concurrency_patterns": [
        "double_checked_locking",
        "future_pattern",
        "singleton_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 16,
      "source_code": "        int length = UNSAFE.getIntVolatile(address + offset);\n\n        if (length <= 0 || length > capacity) {\n            return null;\n        }\n        offset += Constant.INT_SIZE;\n        available -= Constant.INT_SIZE;\n\n        byte[] payload = new byte[length];\n\n        if (available >= length) {\n            UNSAFE.getBytes(address + offset, payload, length);\n        } else {\n            if (available > 0) {\n                UNSAFE.getBytes(address + offset, payload, available);\n            }\n            UNSAFE.getBytes(address + Metadata.ORIGIN_OFFSET, payload, available, length - available);\n        }\n        return new Block(payload);\n    }",
      "line_number": 99,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "align",
      "signature": "private static long align(long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [
        "align",
        "Util.align"
      ],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Util.align(length, Constant.SIZE);\n    }",
      "line_number": 125,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "utilities",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "cost",
      "signature": "private static long cost(long length) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        return Constant.INT_SIZE + align(length);\n    }",
      "line_number": 129,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "getPayload",
      "signature": "public byte[] getPayload() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Block.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return payload;\n    }",
      "line_number": 133,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Block",
      "method_type": "method"
    },
    {
      "name": "Cursor",
      "signature": "public Cursor(long address, int offset) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Cursor.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        this.address = address;\n        this.offset = offset;\n    }",
      "line_number": 29,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Cursor",
      "method_type": "constructor"
    },
    {
      "name": "rescale",
      "signature": "public static long rescale(long value, long min, long max) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Cursor.java",
      "language": "java",
      "sync_primitives": [
        "static"
      ],
      "dependencies": [],
      "concurrency_patterns": [
        "singleton_pattern"
      ],
      "complexity_score": 0,
      "source_code": "        // return min + ((value & Long.MAX_VALUE) - min) % (max - min);\n\n        // The reason why the above code can not be used\n        // is to reserve data in the range 0-256\n        // after the cursor of Long type overflows\n        return min + (value & Long.MAX_VALUE) % (max - min);\n    }",
      "line_number": 34,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "general",
      "class_name": "Cursor",
      "method_type": "method"
    },
    {
      "name": "update",
      "signature": "public boolean update(long expected, long value) {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Cursor.java",
      "language": "java",
      "sync_primitives": [],
      "dependencies": [
        "UNSAFE.compareAndSwapLong",
        "compareAndSwapLong"
      ],
      "concurrency_patterns": [
        "thread_local_storage"
      ],
      "complexity_score": 0,
      "source_code": "        return UNSAFE.compareAndSwapLong(address + offset, expected, value);\n    }",
      "line_number": 43,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "atomic_operations",
      "class_name": "Cursor",
      "method_type": "method"
    },
    {
      "name": "offset",
      "signature": "public long offset() {",
      "file_path": "cloned_repositories/peptos_traffic-shm/src/main/java/io/traffic/shm/async/Cursor.java",
      "language": "java",
      "sync_primitives": [
        "volatile"
      ],
      "dependencies": [
        "UNSAFE.getLongVolatile",
        "getLongVolatile"
      ],
      "concurrency_patterns": [
        "future_pattern",
        "thread_local_storage"
      ],
      "complexity_score": 3,
      "source_code": "        return UNSAFE.getLongVolatile(address + offset);\n    }",
      "line_number": 47,
      "repository": "peptos/traffic-shm",
      "test_files": [],
      "test_functions": [],
      "domain": "data_structures",
      "class_name": "Cursor",
      "method_type": "method"
    }
  ]
}