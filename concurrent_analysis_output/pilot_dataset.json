{
  "metadata": {
    "selection_date": "2025-06-09",
    "total_candidates": 10,
    "selection_criteria": "Quality score based on test count, comprehensiveness, and repository quality"
  },
  "pilot_pairs": [
    {
      "rank": 1,
      "quality_score": 38.465714285714284,
      "function_name": "outputPackage",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "outputPackage",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 2,
      "quality_score": 38.465714285714284,
      "function_name": "queueClassNamePrefix",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "queueClassNamePrefix",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 3,
      "quality_score": 38.465714285714284,
      "function_name": "visit",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "visit",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 4,
      "quality_score": 38.465714285714284,
      "function_name": "processSpecialNodeTypes",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "processSpecialNodeTypes",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 5,
      "quality_score": 38.465714285714284,
      "function_name": "processSpecialNodeTypes",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "processSpecialNodeTypes",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 6,
      "quality_score": 38.465714285714284,
      "function_name": "isCommentPresent",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "isCommentPresent",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 7,
      "quality_score": 38.465714285714284,
      "function_name": "removeStaticFieldsAndInitialisers",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "removeStaticFieldsAndInitialisers",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 8,
      "quality_score": 38.465714285714284,
      "function_name": "replaceParentClassesForAtomics",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "replaceParentClassesForAtomics",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 9,
      "quality_score": 38.465714285714284,
      "function_name": "organiseImports",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "organiseImports",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    },
    {
      "rank": 10,
      "quality_score": 38.465714285714284,
      "function_name": "fieldUpdaterLazySet",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "full_data": {
        "function_name": "fieldUpdaterLazySet",
        "class_name": "of",
        "repository": "JCTools/JCTools",
        "test_count": 7,
        "test_types": [
          "unit"
        ],
        "test_files": [
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
        ],
        "tests": [
          {
            "name": "test",
            "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
            "line_number": 26,
            "tested_class": "",
            "tested_methods": [
              "readAcquire",
              "readRelease",
              "getLong",
              "writeAcquire",
              "writeRelease",
              "putInt",
              "putLong",
              "getInt"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "test",
            "signature": "public void test() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 22,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          },
          {
            "name": "testFFLamport",
            "signature": "public void testFFLamport() {",
            "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
            "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
            "line_number": 29,
            "tested_class": "",
            "tested_methods": [
              "test"
            ],
            "test_type": "unit"
          }
        ]
      }
    }
  ]
}