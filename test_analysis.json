{
  "analysis_date": "2025-06-09",
  "test_statistics": {
    "total_test_functions": 362,
    "functions_with_tests": 57,
    "test_coverage_percentage": 2.307692307692308
  },
  "test_type_distribution": {
    "unit": 362
  },
  "test_quality_metrics": {
    "test_coverage_percentage": 2.31,
    "average_tests_per_function": 0.15,
    "average_test_diversity": 1.0,
    "concurrency_test_ratio_percentage": 0.0
  },
  "detailed_test_functions": [
    {
      "function_name": "getSizeInBytes",
      "class_name": "Mapper",
      "repository": "JCTools/JCTools",
      "test_count": 3,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java"
      ],
      "tests": [
        {
          "name": "shouldUnderstandInterfaceFields",
          "signature": "public void shouldUnderstandInterfaceFields() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        assertEquals(EXAMPLE_SIZE_IN_BYTES, mapper.getSizeInBytes());\n        StubFlyweight example = newFlyweight();\n        assertNotNull(example);\n        assertTrue(example instanceof Example);\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [
            "newFlyweight",
            "getSizeInBytes"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToReadAndWriteData",
          "signature": "public void shouldBeAbleToReadAndWriteData() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 50,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToMoveFlyweights",
          "signature": "public void shouldBeAbleToMoveFlyweights() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        StubFlyweight writeCursor = (StubFlyweight) writer;\n        StubFlyweight readCursor = (StubFlyweight) reader;\n\n        writeCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n        readCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 62,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "moveTo",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "newFlyweight",
      "class_name": "Mapper",
      "repository": "JCTools/JCTools",
      "test_count": 3,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java"
      ],
      "tests": [
        {
          "name": "shouldUnderstandInterfaceFields",
          "signature": "public void shouldUnderstandInterfaceFields() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        assertEquals(EXAMPLE_SIZE_IN_BYTES, mapper.getSizeInBytes());\n        StubFlyweight example = newFlyweight();\n        assertNotNull(example);\n        assertTrue(example instanceof Example);\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [
            "newFlyweight",
            "getSizeInBytes"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToReadAndWriteData",
          "signature": "public void shouldBeAbleToReadAndWriteData() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 50,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToMoveFlyweights",
          "signature": "public void shouldBeAbleToMoveFlyweights() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        StubFlyweight writeCursor = (StubFlyweight) writer;\n        StubFlyweight readCursor = (StubFlyweight) reader;\n\n        writeCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n        readCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 62,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "moveTo",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "checkCompileFailures",
      "class_name": "Mapper",
      "repository": "JCTools/JCTools",
      "test_count": 3,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java"
      ],
      "tests": [
        {
          "name": "shouldUnderstandInterfaceFields",
          "signature": "public void shouldUnderstandInterfaceFields() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        assertEquals(EXAMPLE_SIZE_IN_BYTES, mapper.getSizeInBytes());\n        StubFlyweight example = newFlyweight();\n        assertNotNull(example);\n        assertTrue(example instanceof Example);\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [
            "newFlyweight",
            "getSizeInBytes"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToReadAndWriteData",
          "signature": "public void shouldBeAbleToReadAndWriteData() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 50,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToMoveFlyweights",
          "signature": "public void shouldBeAbleToMoveFlyweights() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        StubFlyweight writeCursor = (StubFlyweight) writer;\n        StubFlyweight readCursor = (StubFlyweight) reader;\n\n        writeCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n        readCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 62,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "moveTo",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "getTypes",
      "class_name": "Mapper",
      "repository": "JCTools/JCTools",
      "test_count": 3,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java"
      ],
      "tests": [
        {
          "name": "shouldUnderstandInterfaceFields",
          "signature": "public void shouldUnderstandInterfaceFields() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        assertEquals(EXAMPLE_SIZE_IN_BYTES, mapper.getSizeInBytes());\n        StubFlyweight example = newFlyweight();\n        assertNotNull(example);\n        assertTrue(example instanceof Example);\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [
            "newFlyweight",
            "getSizeInBytes"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToReadAndWriteData",
          "signature": "public void shouldBeAbleToReadAndWriteData() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 50,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldBeAbleToMoveFlyweights",
          "signature": "public void shouldBeAbleToMoveFlyweights() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mapping/MapperTest.java",
          "source_code": "        Example writer = (Example) newFlyweight();\n        Example reader = (Example) newFlyweight();\n\n        StubFlyweight writeCursor = (StubFlyweight) writer;\n        StubFlyweight readCursor = (StubFlyweight) reader;\n\n        writeCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n        readCursor.moveTo(startAddress + EXAMPLE_SIZE_IN_BYTES);\n\n        writer.setFoo(5);\n        assertEquals(5, reader.getFoo());\n\n        writer.setBar(6L);\n        assertEquals(6L, reader.getBar());\n    }",
          "line_number": 62,
          "tested_class": "",
          "tested_methods": [
            "setBar",
            "setFoo",
            "newFlyweight",
            "moveTo",
            "getBar",
            "getFoo"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "getLookaheadStep",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "SpscOffHeapFixedSizeRingBuffer",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeAcquire",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeRelease",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeRelease",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "readAcquire",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "readRelease",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "lpLookAheadCache",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "spLookAheadCache",
      "class_name": "SpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 2,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "SpscChannel",
      "class_name": "SpscChannel",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java"
      ],
      "tests": [
        {
          "name": "shouldKnowItsCapacity",
          "signature": "public void shouldKnowItsCapacity() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEquals(REQUESTED_CAPACITY, channel.requestedCapacity());\n        assertEquals(MAXIMUM_CAPACITY, channel.maximumCapacity());\n    }",
          "line_number": 36,
          "tested_class": "",
          "tested_methods": [
            "maximumCapacity",
            "requestedCapacity"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldInitiallyBeEmpty",
          "signature": "public void shouldInitiallyBeEmpty() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEmpty();\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [],
          "test_type": "unit"
        },
        {
          "name": "shouldWriteAnObject",
          "signature": "public void shouldWriteAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setFoo(5);\n        writer.setBar(10L);\n        assertTrue(producer.commit());\n        assertSize(1);\n    }",
          "line_number": 47,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "setFoo",
            "currentElement",
            "commit"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldReadAnObject",
          "signature": "public void shouldReadAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        shouldWriteAnObject();\n\n        assertTrue(consumer.read());\n        assertEmpty();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "shouldWriteAnObject",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadFromEmptyChannel",
          "signature": "public void shouldNotReadFromEmptyChannel() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertEmpty();\n        assertFalse(consumer.read());\n    }",
          "line_number": 68,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadUnCommittedMessages",
          "signature": "public void shouldNotReadUnCommittedMessages() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setBar(10L);\n\n        assertFalse(consumer.read());\n    }",
          "line_number": 76,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "read",
            "newConsumer",
            "currentElement"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotOverrunBuffer",
          "signature": "public void shouldNotOverrunBuffer() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        for (int i = 0; i < REQUESTED_CAPACITY; i++) {\n            assertTrue(producer.claim());\n            assertTrue(producer.commit());\n        }\n\n        for (int i = REQUESTED_CAPACITY; i < MAXIMUM_CAPACITY; i++) {\n            // Unknown what happens here.\n            producer.claim();\n            producer.commit();\n        }\n\n        assertFalse(producer.claim());\n        assertTrue(channel.size() >= REQUESTED_CAPACITY);\n        assertTrue(channel.size() <= MAXIMUM_CAPACITY);\n    }",
          "line_number": 88,
          "tested_class": "",
          "tested_methods": [
            "for",
            "claim",
            "commit"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "getMaximumCapacity",
      "class_name": "SpscChannel",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java"
      ],
      "tests": [
        {
          "name": "shouldKnowItsCapacity",
          "signature": "public void shouldKnowItsCapacity() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEquals(REQUESTED_CAPACITY, channel.requestedCapacity());\n        assertEquals(MAXIMUM_CAPACITY, channel.maximumCapacity());\n    }",
          "line_number": 36,
          "tested_class": "",
          "tested_methods": [
            "maximumCapacity",
            "requestedCapacity"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldInitiallyBeEmpty",
          "signature": "public void shouldInitiallyBeEmpty() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEmpty();\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [],
          "test_type": "unit"
        },
        {
          "name": "shouldWriteAnObject",
          "signature": "public void shouldWriteAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setFoo(5);\n        writer.setBar(10L);\n        assertTrue(producer.commit());\n        assertSize(1);\n    }",
          "line_number": 47,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "setFoo",
            "currentElement",
            "commit"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldReadAnObject",
          "signature": "public void shouldReadAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        shouldWriteAnObject();\n\n        assertTrue(consumer.read());\n        assertEmpty();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "shouldWriteAnObject",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadFromEmptyChannel",
          "signature": "public void shouldNotReadFromEmptyChannel() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertEmpty();\n        assertFalse(consumer.read());\n    }",
          "line_number": 68,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadUnCommittedMessages",
          "signature": "public void shouldNotReadUnCommittedMessages() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setBar(10L);\n\n        assertFalse(consumer.read());\n    }",
          "line_number": 76,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "read",
            "newConsumer",
            "currentElement"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotOverrunBuffer",
          "signature": "public void shouldNotOverrunBuffer() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        for (int i = 0; i < REQUESTED_CAPACITY; i++) {\n            assertTrue(producer.claim());\n            assertTrue(producer.commit());\n        }\n\n        for (int i = REQUESTED_CAPACITY; i < MAXIMUM_CAPACITY; i++) {\n            // Unknown what happens here.\n            producer.claim();\n            producer.commit();\n        }\n\n        assertFalse(producer.claim());\n        assertTrue(channel.size() >= REQUESTED_CAPACITY);\n        assertTrue(channel.size() <= MAXIMUM_CAPACITY);\n    }",
          "line_number": 88,
          "tested_class": "",
          "tested_methods": [
            "for",
            "claim",
            "commit"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "checkSufficientCapacity",
      "class_name": "SpscChannel",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java"
      ],
      "tests": [
        {
          "name": "shouldKnowItsCapacity",
          "signature": "public void shouldKnowItsCapacity() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEquals(REQUESTED_CAPACITY, channel.requestedCapacity());\n        assertEquals(MAXIMUM_CAPACITY, channel.maximumCapacity());\n    }",
          "line_number": 36,
          "tested_class": "",
          "tested_methods": [
            "maximumCapacity",
            "requestedCapacity"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldInitiallyBeEmpty",
          "signature": "public void shouldInitiallyBeEmpty() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEmpty();\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [],
          "test_type": "unit"
        },
        {
          "name": "shouldWriteAnObject",
          "signature": "public void shouldWriteAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setFoo(5);\n        writer.setBar(10L);\n        assertTrue(producer.commit());\n        assertSize(1);\n    }",
          "line_number": 47,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "setFoo",
            "currentElement",
            "commit"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldReadAnObject",
          "signature": "public void shouldReadAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        shouldWriteAnObject();\n\n        assertTrue(consumer.read());\n        assertEmpty();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "shouldWriteAnObject",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadFromEmptyChannel",
          "signature": "public void shouldNotReadFromEmptyChannel() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertEmpty();\n        assertFalse(consumer.read());\n    }",
          "line_number": 68,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadUnCommittedMessages",
          "signature": "public void shouldNotReadUnCommittedMessages() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setBar(10L);\n\n        assertFalse(consumer.read());\n    }",
          "line_number": 76,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "read",
            "newConsumer",
            "currentElement"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotOverrunBuffer",
          "signature": "public void shouldNotOverrunBuffer() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        for (int i = 0; i < REQUESTED_CAPACITY; i++) {\n            assertTrue(producer.claim());\n            assertTrue(producer.commit());\n        }\n\n        for (int i = REQUESTED_CAPACITY; i < MAXIMUM_CAPACITY; i++) {\n            // Unknown what happens here.\n            producer.claim();\n            producer.commit();\n        }\n\n        assertFalse(producer.claim());\n        assertTrue(channel.size() >= REQUESTED_CAPACITY);\n        assertTrue(channel.size() <= MAXIMUM_CAPACITY);\n    }",
          "line_number": 88,
          "tested_class": "",
          "tested_methods": [
            "for",
            "claim",
            "commit"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "newProducer",
      "class_name": "SpscChannel",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java"
      ],
      "tests": [
        {
          "name": "shouldKnowItsCapacity",
          "signature": "public void shouldKnowItsCapacity() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEquals(REQUESTED_CAPACITY, channel.requestedCapacity());\n        assertEquals(MAXIMUM_CAPACITY, channel.maximumCapacity());\n    }",
          "line_number": 36,
          "tested_class": "",
          "tested_methods": [
            "maximumCapacity",
            "requestedCapacity"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldInitiallyBeEmpty",
          "signature": "public void shouldInitiallyBeEmpty() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertEmpty();\n    }",
          "line_number": 42,
          "tested_class": "",
          "tested_methods": [],
          "test_type": "unit"
        },
        {
          "name": "shouldWriteAnObject",
          "signature": "public void shouldWriteAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setFoo(5);\n        writer.setBar(10L);\n        assertTrue(producer.commit());\n        assertSize(1);\n    }",
          "line_number": 47,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "setFoo",
            "currentElement",
            "commit"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldReadAnObject",
          "signature": "public void shouldReadAnObject() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        shouldWriteAnObject();\n\n        assertTrue(consumer.read());\n        assertEmpty();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "shouldWriteAnObject",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadFromEmptyChannel",
          "signature": "public void shouldNotReadFromEmptyChannel() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertEmpty();\n        assertFalse(consumer.read());\n    }",
          "line_number": 68,
          "tested_class": "",
          "tested_methods": [
            "newConsumer",
            "read"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotReadUnCommittedMessages",
          "signature": "public void shouldNotReadUnCommittedMessages() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        ChannelConsumer consumer = newConsumer();\n\n        assertTrue(producer.claim());\n\n        Example writer = producer.currentElement();\n        writer.setBar(10L);\n\n        assertFalse(consumer.read());\n    }",
          "line_number": 76,
          "tested_class": "",
          "tested_methods": [
            "claim",
            "setBar",
            "read",
            "newConsumer",
            "currentElement"
          ],
          "test_type": "unit"
        },
        {
          "name": "shouldNotOverrunBuffer",
          "signature": "public void shouldNotOverrunBuffer() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscChannelTest.java",
          "source_code": "        for (int i = 0; i < REQUESTED_CAPACITY; i++) {\n            assertTrue(producer.claim());\n            assertTrue(producer.commit());\n        }\n\n        for (int i = REQUESTED_CAPACITY; i < MAXIMUM_CAPACITY; i++) {\n            // Unknown what happens here.\n            producer.claim();\n            producer.commit();\n        }\n\n        assertFalse(producer.claim());\n        assertTrue(channel.size() >= REQUESTED_CAPACITY);\n        assertTrue(channel.size() <= MAXIMUM_CAPACITY);\n    }",
          "line_number": 88,
          "tested_class": "",
          "tested_methods": [
            "for",
            "claim",
            "commit"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "MpscOffHeapFixedSizeRingBuffer",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeAcquire",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeRelease",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "writeRelease",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "readAcquire",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "readRelease",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "casProducerIndex",
      "class_name": "MpscOffHeapFixedSizeRingBuffer",
      "repository": "JCTools/JCTools",
      "test_count": 4,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "outputPackage",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "queueClassNamePrefix",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "visit",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "processSpecialNodeTypes",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "processSpecialNodeTypes",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "isCommentPresent",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "removeStaticFieldsAndInitialisers",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "replaceParentClassesForAtomics",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "organiseImports",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "fieldUpdaterLazySet",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "fieldAssignment",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "declareLongFieldUpdater",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "newAtomicLongFieldUpdater",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "returnField",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "isRefArray",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "isRefType",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "buildGenerator",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "staticImportDeclaration",
      "class_name": "of",
      "repository": "JCTools/JCTools",
      "test_count": 7,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
        "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java"
      ],
      "tests": [
        {
          "name": "test",
          "signature": "public static void test(OffHeapFixedMessageSizeRingBuffer rb) {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/AbstractOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        assertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n\t\t\n\t\tlong writeOffset = rb.writeAcquire();\n\t\tassertNotEquals(EOF, writeOffset);\n\t\tlong fieldOffset = writeOffset+MESSAGE_INDICATOR_SIZE;\n\t\tUNSAFE.putInt(fieldOffset,1);\n\t\tUNSAFE.putLong(fieldOffset+4,1);\n\t\t// blah blah, not writing the rest\n\t\t\n\t\trb.writeRelease(writeOffset);\n\t\tassertEquals(1, rb.size());\n\t\tassertTrue(!rb.isEmpty());\n\t\tlong readOffset = rb.readAcquire();\n\t\tfieldOffset = readOffset + MESSAGE_INDICATOR_SIZE;\n\t\tassertNotEquals(EOF, readOffset);\n\t\tassertEquals(writeOffset, readOffset);\n\t\tassertEquals(1, UNSAFE.getInt(fieldOffset));\n\t\tassertEquals(1L, UNSAFE.getLong(fieldOffset+4));\n\t\trb.readRelease(readOffset);\n\t\t\n\t\tassertEquals(0, rb.size());\n\t\tassertTrue(rb.isEmpty());\n\t\tassertEquals(EOF, rb.readAcquire());\n    }",
          "line_number": 26,
          "tested_class": "",
          "tested_methods": [
            "readAcquire",
            "readRelease",
            "getLong",
            "writeAcquire",
            "writeRelease",
            "putInt",
            "putLong",
            "getInt"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n\t\tSpscOffHeapFixedSizeRingBuffer rb = new SpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n\t\ttest(rb);\n\t}",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "test",
          "signature": "public void test() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscOffHeapFixedSizeRingBuffer rb = new MpscOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 22,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        },
        {
          "name": "testFFLamport",
          "signature": "public void testFFLamport() {",
          "file_path": "cloned_repositories/JCTools_JCTools/jctools-channels/src/test/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBufferTest.java",
          "source_code": "        // TODO: Needs test for when referenceMessageSize > 0\n        MpscFFLamportOffHeapFixedSizeRingBuffer rb = new MpscFFLamportOffHeapFixedSizeRingBuffer(1024, 31, 0);\n        test(rb);\n    }",
          "line_number": 29,
          "tested_class": "",
          "tested_methods": [
            "test"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "MappedFile",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "with",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "with",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "as",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "with",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "with",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "getSize",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "getAddress",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "map",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "unmap",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "map0",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "unmap0",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "modeFor",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "mapAlignment",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    },
    {
      "function_name": "mapAlign",
      "class_name": "MappedFile",
      "repository": "peptos/traffic-shm",
      "test_count": 10,
      "test_types": [
        "unit"
      ],
      "test_files": [
        "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java"
      ],
      "tests": [
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testMappedFile",
          "signature": "public void testMappedFile() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        MappedFile mappedFile = MappedFile.with(\"/Users/peptos/ashm\", 2000L);\n        System.out.println(mappedFile.getAddress());\n\n        mappedFile.unmap();\n    }",
          "line_number": 31,
          "tested_class": "",
          "tested_methods": [
            "with",
            "getAddress",
            "println",
            "unmap"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testQueue",
          "signature": "public void testQueue() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        queue.close();\n    }",
          "line_number": 39,
          "tested_class": "",
          "tested_methods": [
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testGet",
          "signature": "public void testGet() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n\n        io.traffic.shm.async.Block block = queue.poll();\n        if (block != null) {\n            System.out.println(new String(block.getPayload(), \"UTF-8\"));\n        }\n\n        queue.close();\n    }",
          "line_number": 46,
          "tested_class": "",
          "tested_methods": [
            "println",
            "map",
            "getPayload",
            "poll",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testReset",
          "signature": "public void testReset() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        final Queue queue = Queue.map(\"/Users/peptos/ashm\", 2000L);\n        queue.reset();\n\n        queue.close();\n    }",
          "line_number": 58,
          "tested_class": "",
          "tested_methods": [
            "reset",
            "map",
            "close"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        },
        {
          "name": "testCRC16",
          "signature": "public void testCRC16() throws Exception {",
          "file_path": "cloned_repositories/peptos_traffic-shm/src/test/java/io/traffic/shm/test/TestMappedFile.java",
          "source_code": "        System.out.println(CRC16.hash(\"async\"));\n        System.out.println(CRC16.hash(\"sync\"));\n        Assert.assertEquals(22621, CRC16.hash(\"async\"));\n        Assert.assertEquals(60368, CRC16.hash(\"sync\"));\n    }",
          "line_number": 66,
          "tested_class": "",
          "tested_methods": [
            "println",
            "hash"
          ],
          "test_type": "unit"
        }
      ]
    }
  ]
}